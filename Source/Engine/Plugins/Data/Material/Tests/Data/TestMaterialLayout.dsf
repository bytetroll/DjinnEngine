class MaterialVertexInput {
    @Attribute("vertex", 0) float3 position;
    @Attribute("vertex", 0) float3 normal;
    @Attribute("vertex", 0) float3 tangent;
    @Attribute("vertex", 0) float2 texcoord;
}

class MaterialVertexData {
    this();
    @Semantic("position") float4 position;
    float3 worldPosition;
    float3 worldNormal;
    float3 worldTangent;
    float2 texcoord;

    float3 GetPosition() {
        return worldPosition;
    }

    float3 GetNormal() {
        return worldNormal;
    }

    float3 GetTangent() {
        return worldTangent;
    }

    float2 GetTexcoord() {
        return texcoord;
    }
}

MaterialVertexData TransformVertexData(MaterialVertexInput input) {
    auto data = MaterialVertexData();
    data.position = Data.GetViewProjection().mul(float4(input.position, 1));
    data.worldPosition = Data.GetWorld().mul(float4(input.position, 1)).xyz();
    data.worldTangent = Data.GetWorld().mul(float4(input.tangent, 0)).xyz();
    data.worldNormal = Data.GetWorld().mul(float4(input.normal, 0)).xyz();
    data.texcoord = input.texcoord;
    return data;
}
